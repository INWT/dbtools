% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sqlAssertions.R
\name{sqlAssertPattern}
\alias{sqlAssertPattern}
\alias{sqlAssertChar}
\alias{sqlAssertChars}
\alias{sqlAssertNum}
\alias{sqlAssertNums}
\alias{sqlAssertAlnum}
\alias{sqlAssertAlnums}
\alias{sqlAssertWord}
\alias{sqlAssertWords}
\alias{sqlParan}
\alias{sqlComma}
\alias{sqlEsc}
\alias{sqlName}
\alias{sqlNames}
\alias{sqlInNums}
\alias{sqlInChars}
\title{SQL Assertions and Formats}
\usage{
sqlAssertPattern(x, pattern, negate = FALSE)

sqlAssertChar(x)

sqlAssertChars(x)

sqlAssertNum(x)

sqlAssertNums(x)

sqlAssertAlnum(x)

sqlAssertAlnums(x)

sqlAssertWord(x)

sqlAssertWords(x)

sqlParan(x, assert = identity)

sqlComma(x, assert = identity)

sqlEsc(x, assert = identity, with = "`")

sqlName(x)

sqlNames(x)

sqlInNums(x)

sqlInChars(x)
}
\arguments{
\item{x}{(ANY) input}

\item{pattern}{(character) a regular expression used in \link{grepl}}

\item{negate}{(logical) if TRUE then an error is thrown if at least one of
the elements in x match pattern. If FALSE all elements in x must match the
pattern.}

\item{assert}{(function) an assertion function}

\item{with}{(character)}
}
\description{
These functions can be used to format and check the input of queries.
}
\examples{
# Will format and check:
sqlInChars(letters[1:2])
sqlInNums(1:2)
sqlNames(letters[1:2])
sqlName("a")

# Only check:
sqlAssertNum(1)
sqlAssertNums(1:2)
sqlAssertChar("a")
sqlAssertChars(letters[1:2])
}
